/**
 ******************************************************************************
 * @addtogroup UAVObjects LibrePilot UAVObjects
 * @{
 * @addtogroup DebugLogEntry DebugLogEntry
 * @brief Log Entry in Flash
 *
 * Autogenerated files and functions for DebugLogEntry Object
 *
 * @{
 *
 * @file       debuglogentry.h
 *
 * @author     The LibrePilot Project, https://www.librepilot.org, (C) 2017.
 *             The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 *
 * @brief      Arduino Header of the DebugLogEntry object. This file has been
 *             automatically generated by the UAVObjectGenerator.
 *
 * @note       Object definition file: debuglogentry.xml.
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef DEBUGLOGENTRY_H
#define DEBUGLOGENTRY_H
#include <stdbool.h>
/* Object constants */
#define DEBUGLOGENTRY_OBJID 0x233CDCC0
#define DEBUGLOGENTRY_ISSINGLEINST 1
#define DEBUGLOGENTRY_ISSETTINGS 0
#define DEBUGLOGENTRY_ISPRIORITY 0
#define DEBUGLOGENTRY_NUMBYTES sizeof(DebugLogEntryData)

/* Field FlightTime information */

/* Field ObjectID information */

/* Field Flight information */

/* Field Entry information */

/* Field InstanceID information */

/* Field Size information */

/* Field Type information */

// Enumeration options for field Type
typedef enum __attribute__ ((__packed__)) {
    DEBUGLOGENTRY_TYPE_EMPTY=0,
    DEBUGLOGENTRY_TYPE_TEXT=1,
    DEBUGLOGENTRY_TYPE_UAVOBJECT=2,
    DEBUGLOGENTRY_TYPE_MULTIPLEUAVOBJECTS=3
} DebugLogEntryTypeOptions;

/* Field Data information */

// Number of elements for field Data
#define DEBUGLOGENTRY_DATA_NUMELEM 200




/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    uint32_t FlightTime;
    uint32_t ObjectID;
    uint16_t Flight;
    uint16_t Entry;
    uint16_t InstanceID;
    uint16_t Size;
    DebugLogEntryTypeOptions Type;
    uint8_t Data[200];

} __attribute__((packed)) DebugLogEntryDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes
 */
typedef DebugLogEntryDataPacked __attribute__((aligned(4))) DebugLogEntryData;

/*
 * Union to apply the data array to and to use as structured object data
 */
union {
    DebugLogEntryDataPacked data;
    byte arr[DEBUGLOGENTRY_NUMBYTES];
 } DebugLogEntryDataUnion;

#endif // DEBUGLOGENTRY_H

/**
 * @}
 * @}
 */
