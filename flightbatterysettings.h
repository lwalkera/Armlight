/**
 ******************************************************************************
 * @addtogroup UAVObjects LibrePilot UAVObjects
 * @{
 * @addtogroup FlightBatterySettings FlightBatterySettings
 * @brief Flight Battery configuration.
 *
 * Autogenerated files and functions for FlightBatterySettings Object
 *
 * @{
 *
 * @file       flightbatterysettings.h
 *
 * @author     The LibrePilot Project, https://www.librepilot.org, (C) 2017.
 *             The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 *
 * @brief      Arduino Header of the FlightBatterySettings object. This file has been
 *             automatically generated by the UAVObjectGenerator.
 *
 * @note       Object definition file: flightbatterysettings.xml.
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef FLIGHTBATTERYSETTINGS_H
#define FLIGHTBATTERYSETTINGS_H
#include <stdbool.h>
/* Object constants */
#define FLIGHTBATTERYSETTINGS_OBJID 0x2B081FC0
#define FLIGHTBATTERYSETTINGS_ISSINGLEINST 1
#define FLIGHTBATTERYSETTINGS_ISSETTINGS 1
#define FLIGHTBATTERYSETTINGS_ISPRIORITY 0
#define FLIGHTBATTERYSETTINGS_NUMBYTES sizeof(FlightBatterySettingsData)

/* Field Capacity information */

/* Field CellVoltageThresholds information */

// Array element names for field CellVoltageThresholds
typedef enum {
    FLIGHTBATTERYSETTINGS_CELLVOLTAGETHRESHOLDS_WARNING=0,
    FLIGHTBATTERYSETTINGS_CELLVOLTAGETHRESHOLDS_CRITICAL=1
} FlightBatterySettingsCellVoltageThresholdsElem;

// Number of elements for field CellVoltageThresholds
#define FLIGHTBATTERYSETTINGS_CELLVOLTAGETHRESHOLDS_NUMELEM 2

/* Field SensorCalibrations information */

// Array element names for field SensorCalibrations
typedef enum {
    FLIGHTBATTERYSETTINGS_SENSORCALIBRATIONS_VOLTAGEFACTOR=0,
    FLIGHTBATTERYSETTINGS_SENSORCALIBRATIONS_CURRENTFACTOR=1,
    FLIGHTBATTERYSETTINGS_SENSORCALIBRATIONS_VOLTAGEZERO=2,
    FLIGHTBATTERYSETTINGS_SENSORCALIBRATIONS_CURRENTZERO=3
} FlightBatterySettingsSensorCalibrationsElem;

// Number of elements for field SensorCalibrations
#define FLIGHTBATTERYSETTINGS_SENSORCALIBRATIONS_NUMELEM 4

/* Field Type information */

// Enumeration options for field Type
typedef enum __attribute__ ((__packed__)) {
    FLIGHTBATTERYSETTINGS_TYPE_LIPO=0,
    FLIGHTBATTERYSETTINGS_TYPE_LIHV=1,
    FLIGHTBATTERYSETTINGS_TYPE_A123=2,
    FLIGHTBATTERYSETTINGS_TYPE_LICO=3,
    FLIGHTBATTERYSETTINGS_TYPE_LIFESO4=4,
    FLIGHTBATTERYSETTINGS_TYPE_NONE=5
} FlightBatterySettingsTypeOptions;

/* Field NbCells information */

/* Field ResetConsumedEnergy information */

// Enumeration options for field ResetConsumedEnergy
typedef enum __attribute__ ((__packed__)) {
    FLIGHTBATTERYSETTINGS_RESETCONSUMEDENERGY_FALSE=0,
    FLIGHTBATTERYSETTINGS_RESETCONSUMEDENERGY_TRUE=1
} FlightBatterySettingsResetConsumedEnergyOptions;



typedef struct __attribute__ ((__packed__)) {
    float Warning;
    float Critical;
}  FlightBatterySettingsCellVoltageThresholdsData ;
typedef struct __attribute__ ((__packed__)) {
    float array[2];
}  FlightBatterySettingsCellVoltageThresholdsDataArray ;
#define FlightBatterySettingsCellVoltageThresholdsToArray( var ) UAVObjectFieldToArray( FlightBatterySettingsCellVoltageThresholdsData, var )

typedef struct __attribute__ ((__packed__)) {
    float VoltageFactor;
    float CurrentFactor;
    float VoltageZero;
    float CurrentZero;
}  FlightBatterySettingsSensorCalibrationsData ;
typedef struct __attribute__ ((__packed__)) {
    float array[4];
}  FlightBatterySettingsSensorCalibrationsDataArray ;
#define FlightBatterySettingsSensorCalibrationsToArray( var ) UAVObjectFieldToArray( FlightBatterySettingsSensorCalibrationsData, var )


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    uint32_t Capacity;
    FlightBatterySettingsCellVoltageThresholdsData CellVoltageThresholds;
    FlightBatterySettingsSensorCalibrationsData SensorCalibrations;
    FlightBatterySettingsTypeOptions Type;
    uint8_t NbCells;
    FlightBatterySettingsResetConsumedEnergyOptions ResetConsumedEnergy;

} __attribute__((packed)) FlightBatterySettingsDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes
 */
typedef FlightBatterySettingsDataPacked __attribute__((aligned(4))) FlightBatterySettingsData;

/*
 * Union to apply the data array to and to use as structured object data
 */
union {
    FlightBatterySettingsDataPacked data;
    byte arr[FLIGHTBATTERYSETTINGS_NUMBYTES];
 } FlightBatterySettingsDataUnion;

#endif // FLIGHTBATTERYSETTINGS_H

/**
 * @}
 * @}
 */
