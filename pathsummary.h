/**
 ******************************************************************************
 * @addtogroup UAVObjects LibrePilot UAVObjects
 * @{
 * @addtogroup PathSummary PathSummary
 * @brief Summary of a completed path segment  Can come from any @ref PathFollower module
 *
 * Autogenerated files and functions for PathSummary Object
 *
 * @{
 *
 * @file       pathsummary.h
 *
 * @author     The LibrePilot Project, https://www.librepilot.org, (C) 2017.
 *             The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 *
 * @brief      Arduino Header of the PathSummary object. This file has been
 *             automatically generated by the UAVObjectGenerator.
 *
 * @note       Object definition file: pathsummary.xml.
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef PATHSUMMARY_H
#define PATHSUMMARY_H
#include <stdbool.h>
/* Object constants */
#define PATHSUMMARY_OBJID 0x7F594216
#define PATHSUMMARY_ISSINGLEINST 1
#define PATHSUMMARY_ISSETTINGS 0
#define PATHSUMMARY_ISPRIORITY 0
#define PATHSUMMARY_NUMBYTES sizeof(PathSummaryData)

/* Field brake_distance_offset information */

/* Field time_remaining information */

/* Field fractional_progress information */

/* Field decelrate information */

/* Field brakeRateActualDesiredRatio information */

/* Field velocityIntoHold information */

/* Field UID information */

/* Field brake_exit_reason information */

// Enumeration options for field brake_exit_reason
typedef enum __attribute__ ((__packed__)) {
    PATHSUMMARY_BRAKE_EXIT_REASON_TIMEOUT=0,
    PATHSUMMARY_BRAKE_EXIT_REASON_PATHCOMPLETED=1,
    PATHSUMMARY_BRAKE_EXIT_REASON_PATHERROR=2
} PathSummarybrake_exit_reasonOptions;

/* Field Mode information */

// Enumeration options for field Mode
typedef enum __attribute__ ((__packed__)) {
    PATHSUMMARY_MODE_GOTOENDPOINT=0,
    PATHSUMMARY_MODE_FOLLOWVECTOR=1,
    PATHSUMMARY_MODE_CIRCLERIGHT=2,
    PATHSUMMARY_MODE_CIRCLELEFT=3,
    PATHSUMMARY_MODE_FIXEDATTITUDE=4,
    PATHSUMMARY_MODE_SETACCESSORY=5,
    PATHSUMMARY_MODE_DISARMALARM=6,
    PATHSUMMARY_MODE_LAND=7,
    PATHSUMMARY_MODE_BRAKE=8,
    PATHSUMMARY_MODE_VELOCITY=9,
    PATHSUMMARY_MODE_AUTOTAKEOFF=10
} PathSummaryModeOptions;




/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    float brake_distance_offset;
    float time_remaining;
    float fractional_progress;
    float decelrate;
    float brakeRateActualDesiredRatio;
    float velocityIntoHold;
    int16_t UID;
    PathSummarybrake_exit_reasonOptions brake_exit_reason;
    PathSummaryModeOptions Mode;

} __attribute__((packed)) PathSummaryDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes
 */
typedef PathSummaryDataPacked __attribute__((aligned(4))) PathSummaryData;

/*
 * Union to apply the data array to and to use as structured object data
 */
union {
    PathSummaryDataPacked data;
    byte arr[PATHSUMMARY_NUMBYTES];
 } PathSummaryDataUnion;

#endif // PATHSUMMARY_H

/**
 * @}
 * @}
 */
