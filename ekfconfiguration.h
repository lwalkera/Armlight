/**
 ******************************************************************************
 * @addtogroup UAVObjects LibrePilot UAVObjects
 * @{
 * @addtogroup EKFConfiguration EKFConfiguration
 * @brief Extended Kalman Filter initialisation
 *
 * Autogenerated files and functions for EKFConfiguration Object
 *
 * @{
 *
 * @file       ekfconfiguration.h
 *
 * @author     The LibrePilot Project, https://www.librepilot.org, (C) 2017.
 *             The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 *
 * @brief      Arduino Header of the EKFConfiguration object. This file has been
 *             automatically generated by the UAVObjectGenerator.
 *
 * @note       Object definition file: ekfconfiguration.xml.
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef EKFCONFIGURATION_H
#define EKFCONFIGURATION_H
#include <stdbool.h>
/* Object constants */
#define EKFCONFIGURATION_OBJID 0x5D1D071A
#define EKFCONFIGURATION_ISSINGLEINST 1
#define EKFCONFIGURATION_ISSETTINGS 1
#define EKFCONFIGURATION_ISPRIORITY 0
#define EKFCONFIGURATION_NUMBYTES sizeof(EKFConfigurationData)

/* Field P information */

// Array element names for field P
typedef enum {
    EKFCONFIGURATION_P_POSITIONNORTH=0,
    EKFCONFIGURATION_P_POSITIONEAST=1,
    EKFCONFIGURATION_P_POSITIONDOWN=2,
    EKFCONFIGURATION_P_VELOCITYNORTH=3,
    EKFCONFIGURATION_P_VELOCITYEAST=4,
    EKFCONFIGURATION_P_VELOCITYDOWN=5,
    EKFCONFIGURATION_P_ATTITUDEQ1=6,
    EKFCONFIGURATION_P_ATTITUDEQ2=7,
    EKFCONFIGURATION_P_ATTITUDEQ3=8,
    EKFCONFIGURATION_P_ATTITUDEQ4=9,
    EKFCONFIGURATION_P_GYRODRIFTX=10,
    EKFCONFIGURATION_P_GYRODRIFTY=11,
    EKFCONFIGURATION_P_GYRODRIFTZ=12
} EKFConfigurationPElem;

// Number of elements for field P
#define EKFCONFIGURATION_P_NUMELEM 13

/* Field Q information */

// Array element names for field Q
typedef enum {
    EKFCONFIGURATION_Q_GYROX=0,
    EKFCONFIGURATION_Q_GYROY=1,
    EKFCONFIGURATION_Q_GYROZ=2,
    EKFCONFIGURATION_Q_ACCELX=3,
    EKFCONFIGURATION_Q_ACCELY=4,
    EKFCONFIGURATION_Q_ACCELZ=5,
    EKFCONFIGURATION_Q_GYRODRIFTX=6,
    EKFCONFIGURATION_Q_GYRODRIFTY=7,
    EKFCONFIGURATION_Q_GYRODRIFTZ=8
} EKFConfigurationQElem;

// Number of elements for field Q
#define EKFCONFIGURATION_Q_NUMELEM 9

/* Field R information */

// Array element names for field R
typedef enum {
    EKFCONFIGURATION_R_GPSPOSNORTH=0,
    EKFCONFIGURATION_R_GPSPOSEAST=1,
    EKFCONFIGURATION_R_GPSPOSDOWN=2,
    EKFCONFIGURATION_R_GPSVELNORTH=3,
    EKFCONFIGURATION_R_GPSVELEAST=4,
    EKFCONFIGURATION_R_GPSVELDOWN=5,
    EKFCONFIGURATION_R_MAGX=6,
    EKFCONFIGURATION_R_MAGY=7,
    EKFCONFIGURATION_R_MAGZ=8,
    EKFCONFIGURATION_R_BAROZ=9
} EKFConfigurationRElem;

// Number of elements for field R
#define EKFCONFIGURATION_R_NUMELEM 10

/* Field FakeR information */

// Array element names for field FakeR
typedef enum {
    EKFCONFIGURATION_FAKER_FAKEGPSPOSINDOOR=0,
    EKFCONFIGURATION_FAKER_FAKEGPSVELINDOOR=1,
    EKFCONFIGURATION_FAKER_FAKEGPSVELAIRSPEED=2
} EKFConfigurationFakeRElem;

// Number of elements for field FakeR
#define EKFCONFIGURATION_FAKER_NUMELEM 3

/* Field MapMagnetometerToHorizontalPlane information */

// Enumeration options for field MapMagnetometerToHorizontalPlane
typedef enum __attribute__ ((__packed__)) {
    EKFCONFIGURATION_MAPMAGNETOMETERTOHORIZONTALPLANE_FALSE=0,
    EKFCONFIGURATION_MAPMAGNETOMETERTOHORIZONTALPLANE_TRUE=1
} EKFConfigurationMapMagnetometerToHorizontalPlaneOptions;



typedef struct __attribute__ ((__packed__)) {
    float PositionNorth;
    float PositionEast;
    float PositionDown;
    float VelocityNorth;
    float VelocityEast;
    float VelocityDown;
    float AttitudeQ1;
    float AttitudeQ2;
    float AttitudeQ3;
    float AttitudeQ4;
    float GyroDriftX;
    float GyroDriftY;
    float GyroDriftZ;
}  EKFConfigurationPData ;
typedef struct __attribute__ ((__packed__)) {
    float array[13];
}  EKFConfigurationPDataArray ;
#define EKFConfigurationPToArray( var ) UAVObjectFieldToArray( EKFConfigurationPData, var )

typedef struct __attribute__ ((__packed__)) {
    float GyroX;
    float GyroY;
    float GyroZ;
    float AccelX;
    float AccelY;
    float AccelZ;
    float GyroDriftX;
    float GyroDriftY;
    float GyroDriftZ;
}  EKFConfigurationQData ;
typedef struct __attribute__ ((__packed__)) {
    float array[9];
}  EKFConfigurationQDataArray ;
#define EKFConfigurationQToArray( var ) UAVObjectFieldToArray( EKFConfigurationQData, var )

typedef struct __attribute__ ((__packed__)) {
    float GPSPosNorth;
    float GPSPosEast;
    float GPSPosDown;
    float GPSVelNorth;
    float GPSVelEast;
    float GPSVelDown;
    float MagX;
    float MagY;
    float MagZ;
    float BaroZ;
}  EKFConfigurationRData ;
typedef struct __attribute__ ((__packed__)) {
    float array[10];
}  EKFConfigurationRDataArray ;
#define EKFConfigurationRToArray( var ) UAVObjectFieldToArray( EKFConfigurationRData, var )

typedef struct __attribute__ ((__packed__)) {
    float FakeGPSPosIndoor;
    float FakeGPSVelIndoor;
    float FakeGPSVelAirspeed;
}  EKFConfigurationFakeRData ;
typedef struct __attribute__ ((__packed__)) {
    float array[3];
}  EKFConfigurationFakeRDataArray ;
#define EKFConfigurationFakeRToArray( var ) UAVObjectFieldToArray( EKFConfigurationFakeRData, var )


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    EKFConfigurationPData P;
    EKFConfigurationQData Q;
    EKFConfigurationRData R;
    EKFConfigurationFakeRData FakeR;
    EKFConfigurationMapMagnetometerToHorizontalPlaneOptions MapMagnetometerToHorizontalPlane;

} __attribute__((packed)) EKFConfigurationDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes
 */
typedef EKFConfigurationDataPacked __attribute__((aligned(4))) EKFConfigurationData;

/*
 * Union to apply the data array to and to use as structured object data
 */
union {
    EKFConfigurationDataPacked data;
    byte arr[EKFCONFIGURATION_NUMBYTES];
 } EKFConfigurationDataUnion;

#endif // EKFCONFIGURATION_H

/**
 * @}
 * @}
 */
