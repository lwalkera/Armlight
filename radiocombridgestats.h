/**
 ******************************************************************************
 * @addtogroup UAVObjects LibrePilot UAVObjects
 * @{
 * @addtogroup RadioComBridgeStats RadioComBridgeStats
 * @brief Maintains the telemetry statistics from the OPLM RadioComBridge.
 *
 * Autogenerated files and functions for RadioComBridgeStats Object
 *
 * @{
 *
 * @file       radiocombridgestats.h
 *
 * @author     The LibrePilot Project, https://www.librepilot.org, (C) 2017.
 *             The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 *
 * @brief      Arduino Header of the RadioComBridgeStats object. This file has been
 *             automatically generated by the UAVObjectGenerator.
 *
 * @note       Object definition file: radiocombridgestats.xml.
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef RADIOCOMBRIDGESTATS_H
#define RADIOCOMBRIDGESTATS_H
#include <stdbool.h>
/* Object constants */
#define RADIOCOMBRIDGESTATS_OBJID 0x2499AE58
#define RADIOCOMBRIDGESTATS_ISSINGLEINST 1
#define RADIOCOMBRIDGESTATS_ISSETTINGS 0
#define RADIOCOMBRIDGESTATS_ISPRIORITY 0
#define RADIOCOMBRIDGESTATS_NUMBYTES sizeof(RadioComBridgeStatsData)

/* Field TelemetryTxBytes information */

/* Field TelemetryTxFailures information */

/* Field TelemetryTxRetries information */

/* Field TelemetryRxBytes information */

/* Field TelemetryRxFailures information */

/* Field TelemetryRxSyncErrors information */

/* Field TelemetryRxCrcErrors information */

/* Field RadioTxBytes information */

/* Field RadioTxFailures information */

/* Field RadioTxRetries information */

/* Field RadioRxBytes information */

/* Field RadioRxFailures information */

/* Field RadioRxSyncErrors information */

/* Field RadioRxCrcErrors information */




/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    uint32_t TelemetryTxBytes;
    uint32_t TelemetryTxFailures;
    uint32_t TelemetryTxRetries;
    uint32_t TelemetryRxBytes;
    uint32_t TelemetryRxFailures;
    uint32_t TelemetryRxSyncErrors;
    uint32_t TelemetryRxCrcErrors;
    uint32_t RadioTxBytes;
    uint32_t RadioTxFailures;
    uint32_t RadioTxRetries;
    uint32_t RadioRxBytes;
    uint32_t RadioRxFailures;
    uint32_t RadioRxSyncErrors;
    uint32_t RadioRxCrcErrors;

} __attribute__((packed)) RadioComBridgeStatsDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes
 */
typedef RadioComBridgeStatsDataPacked __attribute__((aligned(4))) RadioComBridgeStatsData;

/*
 * Union to apply the data array to and to use as structured object data
 */
union {
    RadioComBridgeStatsDataPacked data;
    byte arr[RADIOCOMBRIDGESTATS_NUMBYTES];
 } RadioComBridgeStatsDataUnion;

#endif // RADIOCOMBRIDGESTATS_H

/**
 * @}
 * @}
 */
