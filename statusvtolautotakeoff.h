/**
 ******************************************************************************
 * @addtogroup UAVObjects LibrePilot UAVObjects
 * @{
 * @addtogroup StatusVtolAutoTakeoff StatusVtolAutoTakeoff
 * @brief Status of a AutoTakeoff autopilot
 *
 * Autogenerated files and functions for StatusVtolAutoTakeoff Object
 *
 * @{
 *
 * @file       statusvtolautotakeoff.h
 *
 * @author     The LibrePilot Project, https://www.librepilot.org, (C) 2017.
 *             The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 *
 * @brief      Arduino Header of the StatusVtolAutoTakeoff object. This file has been
 *             automatically generated by the UAVObjectGenerator.
 *
 * @note       Object definition file: statusvtolautotakeoff.xml.
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef STATUSVTOLAUTOTAKEOFF_H
#define STATUSVTOLAUTOTAKEOFF_H
#include <stdbool.h>
/* Object constants */
#define STATUSVTOLAUTOTAKEOFF_OBJID 0x9FD49FEC
#define STATUSVTOLAUTOTAKEOFF_ISSINGLEINST 1
#define STATUSVTOLAUTOTAKEOFF_ISSETTINGS 0
#define STATUSVTOLAUTOTAKEOFF_ISPRIORITY 0
#define STATUSVTOLAUTOTAKEOFF_NUMBYTES sizeof(StatusVtolAutoTakeoffData)

/* Field AltitudeAtState information */

// Number of elements for field AltitudeAtState
#define STATUSVTOLAUTOTAKEOFF_ALTITUDEATSTATE_NUMELEM 10

/* Field State information */

// Enumeration options for field State
typedef enum __attribute__ ((__packed__)) {
    STATUSVTOLAUTOTAKEOFF_STATE_INACTIVE=0,
    STATUSVTOLAUTOTAKEOFF_STATE_CHECKSTATE=1,
    STATUSVTOLAUTOTAKEOFF_STATE_SLOWSTART=2,
    STATUSVTOLAUTOTAKEOFF_STATE_THRUSTUP=3,
    STATUSVTOLAUTOTAKEOFF_STATE_TAKEOFF=4,
    STATUSVTOLAUTOTAKEOFF_STATE_HOLD=5,
    STATUSVTOLAUTOTAKEOFF_STATE_THRUSTDOWN=6,
    STATUSVTOLAUTOTAKEOFF_STATE_THRUSTOFF=7,
    STATUSVTOLAUTOTAKEOFF_STATE_DISARMED=8
} StatusVtolAutoTakeoffStateOptions;

/* Field StateExitReason information */

// Enumeration options for field StateExitReason
typedef enum __attribute__ ((__packed__)) {
    STATUSVTOLAUTOTAKEOFF_STATEEXITREASON_NONE=0,
    STATUSVTOLAUTOTAKEOFF_STATEEXITREASON_ARRIVEDATALT=1,
    STATUSVTOLAUTOTAKEOFF_STATEEXITREASON_ZEROTHRUST=2,
    STATUSVTOLAUTOTAKEOFF_STATEEXITREASON_POSITIONERROR=3,
    STATUSVTOLAUTOTAKEOFF_STATEEXITREASON_TIMEOUT=4
} StatusVtolAutoTakeoffStateExitReasonOptions;

// Number of elements for field StateExitReason
#define STATUSVTOLAUTOTAKEOFF_STATEEXITREASON_NUMELEM 10

/* Field AltitudeState information */

// Enumeration options for field AltitudeState
typedef enum __attribute__ ((__packed__)) {
    STATUSVTOLAUTOTAKEOFF_ALTITUDESTATE_HIGH=0,
    STATUSVTOLAUTOTAKEOFF_ALTITUDESTATE_LOW=1
} StatusVtolAutoTakeoffAltitudeStateOptions;

/* Field ControlState information */

// Enumeration options for field ControlState
typedef enum __attribute__ ((__packed__)) {
    STATUSVTOLAUTOTAKEOFF_CONTROLSTATE_WAITFORARMED=0,
    STATUSVTOLAUTOTAKEOFF_CONTROLSTATE_WAITFORMIDTHROTTLE=1,
    STATUSVTOLAUTOTAKEOFF_CONTROLSTATE_REQUIREUNARMEDFIRST=2,
    STATUSVTOLAUTOTAKEOFF_CONTROLSTATE_INITIATE=3,
    STATUSVTOLAUTOTAKEOFF_CONTROLSTATE_POSITIONHOLD=4,
    STATUSVTOLAUTOTAKEOFF_CONTROLSTATE_ABORT=5
} StatusVtolAutoTakeoffControlStateOptions;




/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    float AltitudeAtState[10];
    StatusVtolAutoTakeoffStateOptions State;
    StatusVtolAutoTakeoffStateExitReasonOptions StateExitReason[10];
    StatusVtolAutoTakeoffAltitudeStateOptions AltitudeState;
    StatusVtolAutoTakeoffControlStateOptions ControlState;

} __attribute__((packed)) StatusVtolAutoTakeoffDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes
 */
typedef StatusVtolAutoTakeoffDataPacked __attribute__((aligned(4))) StatusVtolAutoTakeoffData;

/*
 * Union to apply the data array to and to use as structured object data
 */
union {
    StatusVtolAutoTakeoffDataPacked data;
    byte arr[STATUSVTOLAUTOTAKEOFF_NUMBYTES];
 } StatusVtolAutoTakeoffDataUnion;

#endif // STATUSVTOLAUTOTAKEOFF_H

/**
 * @}
 * @}
 */
