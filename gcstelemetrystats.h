/**
 ******************************************************************************
 * @addtogroup UAVObjects LibrePilot UAVObjects
 * @{
 * @addtogroup GCSTelemetryStats GCSTelemetryStats
 * @brief The telemetry statistics from the ground computer
 *
 * Autogenerated files and functions for GCSTelemetryStats Object
 *
 * @{
 *
 * @file       gcstelemetrystats.h
 *
 * @author     The LibrePilot Project, https://www.librepilot.org, (C) 2017.
 *             The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 *
 * @brief      Arduino Header of the GCSTelemetryStats object. This file has been
 *             automatically generated by the UAVObjectGenerator.
 *
 * @note       Object definition file: gcstelemetrystats.xml.
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef GCSTELEMETRYSTATS_H
#define GCSTELEMETRYSTATS_H
#include <stdbool.h>
/* Object constants */
#define GCSTELEMETRYSTATS_OBJID 0xCAD1DC0A
#define GCSTELEMETRYSTATS_ISSINGLEINST 1
#define GCSTELEMETRYSTATS_ISSETTINGS 0
#define GCSTELEMETRYSTATS_ISPRIORITY 1
#define GCSTELEMETRYSTATS_NUMBYTES sizeof(GCSTelemetryStatsData)

/* Field TxDataRate information */

/* Field TxBytes information */

/* Field TxFailures information */

/* Field TxRetries information */

/* Field RxDataRate information */

/* Field RxBytes information */

/* Field RxFailures information */

/* Field RxSyncErrors information */

/* Field RxCrcErrors information */

/* Field Status information */

// Enumeration options for field Status
typedef enum __attribute__ ((__packed__)) {
    GCSTELEMETRYSTATS_STATUS_DISCONNECTED=0,
    GCSTELEMETRYSTATS_STATUS_HANDSHAKEREQ=1,
    GCSTELEMETRYSTATS_STATUS_HANDSHAKEACK=2,
    GCSTELEMETRYSTATS_STATUS_CONNECTED=3
} GCSTelemetryStatsStatusOptions;




/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    float TxDataRate;
    uint32_t TxBytes;
    uint32_t TxFailures;
    uint32_t TxRetries;
    float RxDataRate;
    uint32_t RxBytes;
    uint32_t RxFailures;
    uint32_t RxSyncErrors;
    uint32_t RxCrcErrors;
    GCSTelemetryStatsStatusOptions Status;

} __attribute__((packed)) GCSTelemetryStatsDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes
 */
typedef GCSTelemetryStatsDataPacked __attribute__((aligned(4))) GCSTelemetryStatsData;

/*
 * Union to apply the data array to and to use as structured object data
 */
union {
    GCSTelemetryStatsDataPacked data;
    byte arr[GCSTELEMETRYSTATS_NUMBYTES];
 } GCSTelemetryStatsDataUnion;

#endif // GCSTELEMETRYSTATS_H

/**
 * @}
 * @}
 */
