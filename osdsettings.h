/**
 ******************************************************************************
 * @addtogroup UAVObjects LibrePilot UAVObjects
 * @{
 * @addtogroup OsdSettings OsdSettings
 * @brief OSD settings used by the OSDgen module
 *
 * Autogenerated files and functions for OsdSettings Object
 *
 * @{
 *
 * @file       osdsettings.h
 *
 * @author     The LibrePilot Project, https://www.librepilot.org, (C) 2017.
 *             The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 *
 * @brief      Arduino Header of the OsdSettings object. This file has been
 *             automatically generated by the UAVObjectGenerator.
 *
 * @note       Object definition file: osdsettings.xml.
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef OSDSETTINGS_H
#define OSDSETTINGS_H
#include <stdbool.h>
/* Object constants */
#define OSDSETTINGS_OBJID 0xDCBBA81A
#define OSDSETTINGS_ISSINGLEINST 1
#define OSDSETTINGS_ISSETTINGS 1
#define OSDSETTINGS_ISPRIORITY 0
#define OSDSETTINGS_NUMBYTES sizeof(OsdSettingsData)

/* Field AttitudeSetup information */

// Array element names for field AttitudeSetup
typedef enum {
    OSDSETTINGS_ATTITUDESETUP_X=0,
    OSDSETTINGS_ATTITUDESETUP_Y=1
} OsdSettingsAttitudeSetupElem;

// Number of elements for field AttitudeSetup
#define OSDSETTINGS_ATTITUDESETUP_NUMELEM 2

/* Field TimeSetup information */

// Array element names for field TimeSetup
typedef enum {
    OSDSETTINGS_TIMESETUP_X=0,
    OSDSETTINGS_TIMESETUP_Y=1
} OsdSettingsTimeSetupElem;

// Number of elements for field TimeSetup
#define OSDSETTINGS_TIMESETUP_NUMELEM 2

/* Field BatterySetup information */

// Array element names for field BatterySetup
typedef enum {
    OSDSETTINGS_BATTERYSETUP_X=0,
    OSDSETTINGS_BATTERYSETUP_Y=1
} OsdSettingsBatterySetupElem;

// Number of elements for field BatterySetup
#define OSDSETTINGS_BATTERYSETUP_NUMELEM 2

/* Field SpeedSetup information */

// Array element names for field SpeedSetup
typedef enum {
    OSDSETTINGS_SPEEDSETUP_X=0,
    OSDSETTINGS_SPEEDSETUP_Y=1
} OsdSettingsSpeedSetupElem;

// Number of elements for field SpeedSetup
#define OSDSETTINGS_SPEEDSETUP_NUMELEM 2

/* Field AltitudeSetup information */

// Array element names for field AltitudeSetup
typedef enum {
    OSDSETTINGS_ALTITUDESETUP_X=0,
    OSDSETTINGS_ALTITUDESETUP_Y=1
} OsdSettingsAltitudeSetupElem;

// Number of elements for field AltitudeSetup
#define OSDSETTINGS_ALTITUDESETUP_NUMELEM 2

/* Field HeadingSetup information */

// Array element names for field HeadingSetup
typedef enum {
    OSDSETTINGS_HEADINGSETUP_X=0,
    OSDSETTINGS_HEADINGSETUP_Y=1
} OsdSettingsHeadingSetupElem;

// Number of elements for field HeadingSetup
#define OSDSETTINGS_HEADINGSETUP_NUMELEM 2

/* Field Attitude information */

// Enumeration options for field Attitude
typedef enum __attribute__ ((__packed__)) {
    OSDSETTINGS_ATTITUDE_DISABLED=0,
    OSDSETTINGS_ATTITUDE_ENABLED=1
} OsdSettingsAttitudeOptions;

/* Field Time information */

// Enumeration options for field Time
typedef enum __attribute__ ((__packed__)) {
    OSDSETTINGS_TIME_DISABLED=0,
    OSDSETTINGS_TIME_ENABLED=1
} OsdSettingsTimeOptions;

/* Field Battery information */

// Enumeration options for field Battery
typedef enum __attribute__ ((__packed__)) {
    OSDSETTINGS_BATTERY_DISABLED=0,
    OSDSETTINGS_BATTERY_ENABLED=1
} OsdSettingsBatteryOptions;

/* Field Speed information */

// Enumeration options for field Speed
typedef enum __attribute__ ((__packed__)) {
    OSDSETTINGS_SPEED_DISABLED=0,
    OSDSETTINGS_SPEED_ENABLED=1
} OsdSettingsSpeedOptions;

/* Field Altitude information */

// Enumeration options for field Altitude
typedef enum __attribute__ ((__packed__)) {
    OSDSETTINGS_ALTITUDE_DISABLED=0,
    OSDSETTINGS_ALTITUDE_ENABLED=1
} OsdSettingsAltitudeOptions;

/* Field Heading information */

// Enumeration options for field Heading
typedef enum __attribute__ ((__packed__)) {
    OSDSETTINGS_HEADING_DISABLED=0,
    OSDSETTINGS_HEADING_ENABLED=1
} OsdSettingsHeadingOptions;

/* Field Screen information */

/* Field White information */

/* Field Black information */

/* Field AltitudeSource information */

// Enumeration options for field AltitudeSource
typedef enum __attribute__ ((__packed__)) {
    OSDSETTINGS_ALTITUDESOURCE_GPS=0,
    OSDSETTINGS_ALTITUDESOURCE_BARO=1
} OsdSettingsAltitudeSourceOptions;



typedef struct __attribute__ ((__packed__)) {
    int16_t X;
    int16_t Y;
}  OsdSettingsAttitudeSetupData ;
typedef struct __attribute__ ((__packed__)) {
    int16_t array[2];
}  OsdSettingsAttitudeSetupDataArray ;
#define OsdSettingsAttitudeSetupToArray( var ) UAVObjectFieldToArray( OsdSettingsAttitudeSetupData, var )

typedef struct __attribute__ ((__packed__)) {
    int16_t X;
    int16_t Y;
}  OsdSettingsTimeSetupData ;
typedef struct __attribute__ ((__packed__)) {
    int16_t array[2];
}  OsdSettingsTimeSetupDataArray ;
#define OsdSettingsTimeSetupToArray( var ) UAVObjectFieldToArray( OsdSettingsTimeSetupData, var )

typedef struct __attribute__ ((__packed__)) {
    int16_t X;
    int16_t Y;
}  OsdSettingsBatterySetupData ;
typedef struct __attribute__ ((__packed__)) {
    int16_t array[2];
}  OsdSettingsBatterySetupDataArray ;
#define OsdSettingsBatterySetupToArray( var ) UAVObjectFieldToArray( OsdSettingsBatterySetupData, var )

typedef struct __attribute__ ((__packed__)) {
    int16_t X;
    int16_t Y;
}  OsdSettingsSpeedSetupData ;
typedef struct __attribute__ ((__packed__)) {
    int16_t array[2];
}  OsdSettingsSpeedSetupDataArray ;
#define OsdSettingsSpeedSetupToArray( var ) UAVObjectFieldToArray( OsdSettingsSpeedSetupData, var )

typedef struct __attribute__ ((__packed__)) {
    int16_t X;
    int16_t Y;
}  OsdSettingsAltitudeSetupData ;
typedef struct __attribute__ ((__packed__)) {
    int16_t array[2];
}  OsdSettingsAltitudeSetupDataArray ;
#define OsdSettingsAltitudeSetupToArray( var ) UAVObjectFieldToArray( OsdSettingsAltitudeSetupData, var )

typedef struct __attribute__ ((__packed__)) {
    int16_t X;
    int16_t Y;
}  OsdSettingsHeadingSetupData ;
typedef struct __attribute__ ((__packed__)) {
    int16_t array[2];
}  OsdSettingsHeadingSetupDataArray ;
#define OsdSettingsHeadingSetupToArray( var ) UAVObjectFieldToArray( OsdSettingsHeadingSetupData, var )


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    OsdSettingsAttitudeSetupData AttitudeSetup;
    OsdSettingsTimeSetupData TimeSetup;
    OsdSettingsBatterySetupData BatterySetup;
    OsdSettingsSpeedSetupData SpeedSetup;
    OsdSettingsAltitudeSetupData AltitudeSetup;
    OsdSettingsHeadingSetupData HeadingSetup;
    OsdSettingsAttitudeOptions Attitude;
    OsdSettingsTimeOptions Time;
    OsdSettingsBatteryOptions Battery;
    OsdSettingsSpeedOptions Speed;
    OsdSettingsAltitudeOptions Altitude;
    OsdSettingsHeadingOptions Heading;
    uint8_t Screen;
    uint8_t White;
    uint8_t Black;
    OsdSettingsAltitudeSourceOptions AltitudeSource;

} __attribute__((packed)) OsdSettingsDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes
 */
typedef OsdSettingsDataPacked __attribute__((aligned(4))) OsdSettingsData;

/*
 * Union to apply the data array to and to use as structured object data
 */
union {
    OsdSettingsDataPacked data;
    byte arr[OSDSETTINGS_NUMBYTES];
 } OsdSettingsDataUnion;

#endif // OSDSETTINGS_H

/**
 * @}
 * @}
 */
