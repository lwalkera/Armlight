/**
 ******************************************************************************
 * @addtogroup UAVObjects LibrePilot UAVObjects
 * @{
 * @addtogroup AuxMagSettings AuxMagSettings
 * @brief Settings for auxiliary magnetometer calibration
 *
 * Autogenerated files and functions for AuxMagSettings Object
 *
 * @{
 *
 * @file       auxmagsettings.h
 *
 * @author     The LibrePilot Project, https://www.librepilot.org, (C) 2017.
 *             The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 *
 * @brief      Arduino Header of the AuxMagSettings object. This file has been
 *             automatically generated by the UAVObjectGenerator.
 *
 * @note       Object definition file: auxmagsettings.xml.
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef AUXMAGSETTINGS_H
#define AUXMAGSETTINGS_H
#include <stdbool.h>
/* Object constants */
#define AUXMAGSETTINGS_OBJID 0xC380EF60
#define AUXMAGSETTINGS_ISSINGLEINST 1
#define AUXMAGSETTINGS_ISSETTINGS 1
#define AUXMAGSETTINGS_ISPRIORITY 0
#define AUXMAGSETTINGS_NUMBYTES sizeof(AuxMagSettingsData)

/* Field mag_bias information */

// Array element names for field mag_bias
typedef enum {
    AUXMAGSETTINGS_MAG_BIAS_X=0,
    AUXMAGSETTINGS_MAG_BIAS_Y=1,
    AUXMAGSETTINGS_MAG_BIAS_Z=2
} AuxMagSettingsmag_biasElem;

// Number of elements for field mag_bias
#define AUXMAGSETTINGS_MAG_BIAS_NUMELEM 3

/* Field mag_transform information */

// Array element names for field mag_transform
typedef enum {
    AUXMAGSETTINGS_MAG_TRANSFORM_R0C0=0,
    AUXMAGSETTINGS_MAG_TRANSFORM_R0C1=1,
    AUXMAGSETTINGS_MAG_TRANSFORM_R0C2=2,
    AUXMAGSETTINGS_MAG_TRANSFORM_R1C0=3,
    AUXMAGSETTINGS_MAG_TRANSFORM_R1C1=4,
    AUXMAGSETTINGS_MAG_TRANSFORM_R1C2=5,
    AUXMAGSETTINGS_MAG_TRANSFORM_R2C0=6,
    AUXMAGSETTINGS_MAG_TRANSFORM_R2C1=7,
    AUXMAGSETTINGS_MAG_TRANSFORM_R2C2=8
} AuxMagSettingsmag_transformElem;

// Number of elements for field mag_transform
#define AUXMAGSETTINGS_MAG_TRANSFORM_NUMELEM 9

/* Field MagBiasNullingRate information */

/* Field BoardRotation information */

// Array element names for field BoardRotation
typedef enum {
    AUXMAGSETTINGS_BOARDROTATION_ROLL=0,
    AUXMAGSETTINGS_BOARDROTATION_PITCH=1,
    AUXMAGSETTINGS_BOARDROTATION_YAW=2
} AuxMagSettingsBoardRotationElem;

// Number of elements for field BoardRotation
#define AUXMAGSETTINGS_BOARDROTATION_NUMELEM 3

/* Field Type information */

// Enumeration options for field Type
typedef enum __attribute__ ((__packed__)) {
    AUXMAGSETTINGS_TYPE_GPSV9=0,
    AUXMAGSETTINGS_TYPE_FLEXI=1,
    AUXMAGSETTINGS_TYPE_I2C=2,
    AUXMAGSETTINGS_TYPE_DJI=3
} AuxMagSettingsTypeOptions;

/* Field Usage information */

// Enumeration options for field Usage
typedef enum __attribute__ ((__packed__)) {
    AUXMAGSETTINGS_USAGE_BOTH=0,
    AUXMAGSETTINGS_USAGE_ONBOARDONLY=1,
    AUXMAGSETTINGS_USAGE_AUXONLY=2
} AuxMagSettingsUsageOptions;



typedef struct __attribute__ ((__packed__)) {
    float X;
    float Y;
    float Z;
}  AuxMagSettingsmag_biasData ;
typedef struct __attribute__ ((__packed__)) {
    float array[3];
}  AuxMagSettingsmag_biasDataArray ;
#define AuxMagSettingsmag_biasToArray( var ) UAVObjectFieldToArray( AuxMagSettingsmag_biasData, var )

typedef struct __attribute__ ((__packed__)) {
    float r0c0;
    float r0c1;
    float r0c2;
    float r1c0;
    float r1c1;
    float r1c2;
    float r2c0;
    float r2c1;
    float r2c2;
}  AuxMagSettingsmag_transformData ;
typedef struct __attribute__ ((__packed__)) {
    float array[9];
}  AuxMagSettingsmag_transformDataArray ;
#define AuxMagSettingsmag_transformToArray( var ) UAVObjectFieldToArray( AuxMagSettingsmag_transformData, var )

typedef struct __attribute__ ((__packed__)) {
    int16_t Roll;
    int16_t Pitch;
    int16_t Yaw;
}  AuxMagSettingsBoardRotationData ;
typedef struct __attribute__ ((__packed__)) {
    int16_t array[3];
}  AuxMagSettingsBoardRotationDataArray ;
#define AuxMagSettingsBoardRotationToArray( var ) UAVObjectFieldToArray( AuxMagSettingsBoardRotationData, var )


/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    AuxMagSettingsmag_biasData mag_bias;
    AuxMagSettingsmag_transformData mag_transform;
    float MagBiasNullingRate;
    AuxMagSettingsBoardRotationData BoardRotation;
    AuxMagSettingsTypeOptions Type;
    AuxMagSettingsUsageOptions Usage;

} __attribute__((packed)) AuxMagSettingsDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes
 */
typedef AuxMagSettingsDataPacked __attribute__((aligned(4))) AuxMagSettingsData;

/*
 * Union to apply the data array to and to use as structured object data
 */
union {
    AuxMagSettingsDataPacked data;
    byte arr[AUXMAGSETTINGS_NUMBYTES];
 } AuxMagSettingsDataUnion;

#endif // AUXMAGSETTINGS_H

/**
 * @}
 * @}
 */
