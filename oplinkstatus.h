/**
 ******************************************************************************
 * @addtogroup UAVObjects LibrePilot UAVObjects
 * @{
 * @addtogroup OPLinkStatus OPLinkStatus
 * @brief OPLink device status.
 *
 * Autogenerated files and functions for OPLinkStatus Object
 *
 * @{
 *
 * @file       oplinkstatus.h
 *
 * @author     The LibrePilot Project, https://www.librepilot.org, (C) 2017.
 *             The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 *
 * @brief      Arduino Header of the OPLinkStatus object. This file has been
 *             automatically generated by the UAVObjectGenerator.
 *
 * @note       Object definition file: oplinkstatus.xml.
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef OPLINKSTATUS_H
#define OPLINKSTATUS_H
#include <stdbool.h>
/* Object constants */
#define OPLINKSTATUS_OBJID 0xC4A03B86
#define OPLINKSTATUS_ISSINGLEINST 1
#define OPLINKSTATUS_ISSETTINGS 0
#define OPLINKSTATUS_ISPRIORITY 1
#define OPLINKSTATUS_NUMBYTES sizeof(OPLinkStatusData)

/* Field DeviceID information */

/* Field AFCCorrection information */

/* Field BoardRevision information */

/* Field HeapRemaining information */

/* Field UAVTalkErrors information */

/* Field LinkQuality information */

/* Field TXRate information */

/* Field RXRate information */

/* Field TXSeq information */

/* Field RXSeq information */

/* Field TXPacketRate information */

/* Field RXPacketRate information */

/* Field Description information */

// Number of elements for field Description
#define OPLINKSTATUS_DESCRIPTION_NUMELEM 40

/* Field CPUSerial information */

// Number of elements for field CPUSerial
#define OPLINKSTATUS_CPUSERIAL_NUMELEM 12

/* Field BoardType information */

/* Field RxGood information */

/* Field RxCorrected information */

/* Field RxErrors information */

/* Field RxMissed information */

/* Field RxFailure information */

/* Field TxDropped information */

/* Field TxFailure information */

/* Field Resets information */

/* Field Timeouts information */

/* Field RSSI information */

/* Field LinkState information */

// Enumeration options for field LinkState
typedef enum __attribute__ ((__packed__)) {
    OPLINKSTATUS_LINKSTATE_DISABLED=0,
    OPLINKSTATUS_LINKSTATE_ENABLED=1,
    OPLINKSTATUS_LINKSTATE_BINDING=2,
    OPLINKSTATUS_LINKSTATE_BOUND=3,
    OPLINKSTATUS_LINKSTATE_DISCONNECTED=4,
    OPLINKSTATUS_LINKSTATE_CONNECTING=5,
    OPLINKSTATUS_LINKSTATE_CONNECTED=6
} OPLinkStatusLinkStateOptions;




/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    uint32_t DeviceID;
    int32_t AFCCorrection;
    uint16_t BoardRevision;
    uint16_t HeapRemaining;
    uint16_t UAVTalkErrors;
    uint16_t LinkQuality;
    uint16_t TXRate;
    uint16_t RXRate;
    uint16_t TXSeq;
    uint16_t RXSeq;
    uint16_t TXPacketRate;
    uint16_t RXPacketRate;
    uint8_t Description[40];
    uint8_t CPUSerial[12];
    uint8_t BoardType;
    uint8_t RxGood;
    uint8_t RxCorrected;
    uint8_t RxErrors;
    uint8_t RxMissed;
    uint8_t RxFailure;
    uint8_t TxDropped;
    uint8_t TxFailure;
    uint8_t Resets;
    uint8_t Timeouts;
    int8_t RSSI;
    OPLinkStatusLinkStateOptions LinkState;

} __attribute__((packed)) OPLinkStatusDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes
 */
typedef OPLinkStatusDataPacked __attribute__((aligned(4))) OPLinkStatusData;

/*
 * Union to apply the data array to and to use as structured object data
 */
union {
    OPLinkStatusDataPacked data;
    byte arr[OPLINKSTATUS_NUMBYTES];
 } OPLinkStatusDataUnion;

#endif // OPLINKSTATUS_H

/**
 * @}
 * @}
 */
