/**
 ******************************************************************************
 * @addtogroup UAVObjects LibrePilot UAVObjects
 * @{
 * @addtogroup PathAction PathAction
 * @brief A waypoint command the pathplanner is to use at a certain waypoint
 *
 * Autogenerated files and functions for PathAction Object
 *
 * @{
 *
 * @file       pathaction.h
 *
 * @author     The LibrePilot Project, https://www.librepilot.org, (C) 2017.
 *             The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 *
 * @brief      Arduino Header of the PathAction object. This file has been
 *             automatically generated by the UAVObjectGenerator.
 *
 * @note       Object definition file: pathaction.xml.
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef PATHACTION_H
#define PATHACTION_H
#include <stdbool.h>
/* Object constants */
#define PATHACTION_OBJID 0x6048D4F4
#define PATHACTION_ISSINGLEINST 0
#define PATHACTION_ISSETTINGS 0
#define PATHACTION_ISPRIORITY 0
#define PATHACTION_NUMBYTES sizeof(PathActionData)

/* Field ModeParameters information */

// Number of elements for field ModeParameters
#define PATHACTION_MODEPARAMETERS_NUMELEM 4

/* Field ConditionParameters information */

// Number of elements for field ConditionParameters
#define PATHACTION_CONDITIONPARAMETERS_NUMELEM 4

/* Field JumpDestination information */

/* Field ErrorDestination information */

/* Field Mode information */

// Enumeration options for field Mode
typedef enum __attribute__ ((__packed__)) {
    PATHACTION_MODE_GOTOENDPOINT=0,
    PATHACTION_MODE_FOLLOWVECTOR=1,
    PATHACTION_MODE_CIRCLERIGHT=2,
    PATHACTION_MODE_CIRCLELEFT=3,
    PATHACTION_MODE_FIXEDATTITUDE=4,
    PATHACTION_MODE_SETACCESSORY=5,
    PATHACTION_MODE_DISARMALARM=6,
    PATHACTION_MODE_LAND=7,
    PATHACTION_MODE_BRAKE=8,
    PATHACTION_MODE_VELOCITY=9,
    PATHACTION_MODE_AUTOTAKEOFF=10
} PathActionModeOptions;

/* Field EndCondition information */

// Enumeration options for field EndCondition
typedef enum __attribute__ ((__packed__)) {
    PATHACTION_ENDCONDITION_NONE=0,
    PATHACTION_ENDCONDITION_TIMEOUT=1,
    PATHACTION_ENDCONDITION_DISTANCETOTARGET=2,
    PATHACTION_ENDCONDITION_LEGREMAINING=3,
    PATHACTION_ENDCONDITION_BELOWERROR=4,
    PATHACTION_ENDCONDITION_ABOVEALTITUDE=5,
    PATHACTION_ENDCONDITION_ABOVESPEED=6,
    PATHACTION_ENDCONDITION_POINTINGTOWARDSNEXT=7,
    PATHACTION_ENDCONDITION_PYTHONSCRIPT=8,
    PATHACTION_ENDCONDITION_IMMEDIATE=9
} PathActionEndConditionOptions;

/* Field Command information */

// Enumeration options for field Command
typedef enum __attribute__ ((__packed__)) {
    PATHACTION_COMMAND_ONCONDITIONNEXTWAYPOINT=0,
    PATHACTION_COMMAND_ONNOTCONDITIONNEXTWAYPOINT=1,
    PATHACTION_COMMAND_ONCONDITIONJUMPWAYPOINT=2,
    PATHACTION_COMMAND_ONNOTCONDITIONJUMPWAYPOINT=3,
    PATHACTION_COMMAND_IFCONDITIONJUMPWAYPOINTELSENEXTWAYPOINT=4
} PathActionCommandOptions;




/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    float ModeParameters[4];
    float ConditionParameters[4];
    int16_t JumpDestination;
    int16_t ErrorDestination;
    PathActionModeOptions Mode;
    PathActionEndConditionOptions EndCondition;
    PathActionCommandOptions Command;

} __attribute__((packed)) PathActionDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes
 */
typedef PathActionDataPacked __attribute__((aligned(4))) PathActionData;

/*
 * Union to apply the data array to and to use as structured object data
 */
union {
    PathActionDataPacked data;
    byte arr[PATHACTION_NUMBYTES];
 } PathActionDataUnion;

#endif // PATHACTION_H

/**
 * @}
 * @}
 */
