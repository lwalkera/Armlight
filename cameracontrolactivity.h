/**
 ******************************************************************************
 * @addtogroup UAVObjects LibrePilot UAVObjects
 * @{
 * @addtogroup CameraControlActivity CameraControlActivity
 * @brief Contains position and timestamp of each camera operation
 *
 * Autogenerated files and functions for CameraControlActivity Object
 *
 * @{
 *
 * @file       cameracontrolactivity.h
 *
 * @author     The LibrePilot Project, https://www.librepilot.org, (C) 2017.
 *             The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010-2013.
 *
 * @brief      Arduino Header of the CameraControlActivity object. This file has been
 *             automatically generated by the UAVObjectGenerator.
 *
 * @note       Object definition file: cameracontrolactivity.xml.
 *             This is an automatically generated file.
 *             DO NOT modify manually.
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef CAMERACONTROLACTIVITY_H
#define CAMERACONTROLACTIVITY_H
#include <stdbool.h>
/* Object constants */
#define CAMERACONTROLACTIVITY_OBJID 0x9B7A7310
#define CAMERACONTROLACTIVITY_ISSINGLEINST 1
#define CAMERACONTROLACTIVITY_ISSETTINGS 0
#define CAMERACONTROLACTIVITY_ISPRIORITY 0
#define CAMERACONTROLACTIVITY_NUMBYTES sizeof(CameraControlActivityData)

/* Field Latitude information */

/* Field Longitude information */

/* Field Altitude information */

/* Field Roll information */

/* Field Pitch information */

/* Field Yaw information */

/* Field SystemTS information */

/* Field ImageId information */

/* Field TriggerYear information */

/* Field TriggerMillisecond information */

/* Field TriggerMonth information */

/* Field TriggerDay information */

/* Field TriggerHour information */

/* Field TriggerMinute information */

/* Field TriggerSecond information */

/* Field Activity information */

// Enumeration options for field Activity
typedef enum __attribute__ ((__packed__)) {
    CAMERACONTROLACTIVITY_ACTIVITY_IDLE=0,
    CAMERACONTROLACTIVITY_ACTIVITY_TRIGGERPICTURE=1,
    CAMERACONTROLACTIVITY_ACTIVITY_STARTVIDEO=2,
    CAMERACONTROLACTIVITY_ACTIVITY_STOPVIDEO=3
} CameraControlActivityActivityOptions;

/* Field Reason information */

// Enumeration options for field Reason
typedef enum __attribute__ ((__packed__)) {
    CAMERACONTROLACTIVITY_REASON_MANUAL=0,
    CAMERACONTROLACTIVITY_REASON_AUTODISTANCE=1,
    CAMERACONTROLACTIVITY_REASON_AUTOTIME=2
} CameraControlActivityReasonOptions;




/*
 * Packed Object data (unaligned).
 * Should only be used where 4 byte alignment can be guaranteed
 * (eg a single instance on the heap)
 */
typedef struct {
    int32_t Latitude;
    int32_t Longitude;
    float Altitude;
    float Roll;
    float Pitch;
    float Yaw;
    uint32_t SystemTS;
    uint16_t ImageId;
    int16_t TriggerYear;
    int16_t TriggerMillisecond;
    int8_t TriggerMonth;
    int8_t TriggerDay;
    int8_t TriggerHour;
    int8_t TriggerMinute;
    int8_t TriggerSecond;
    CameraControlActivityActivityOptions Activity;
    CameraControlActivityReasonOptions Reason;

} __attribute__((packed)) CameraControlActivityDataPacked;

/*
 * Packed Object data.
 * Alignment is forced to 4 bytes
 */
typedef CameraControlActivityDataPacked __attribute__((aligned(4))) CameraControlActivityData;

/*
 * Union to apply the data array to and to use as structured object data
 */
union {
    CameraControlActivityDataPacked data;
    byte arr[CAMERACONTROLACTIVITY_NUMBYTES];
 } CameraControlActivityDataUnion;

#endif // CAMERACONTROLACTIVITY_H

/**
 * @}
 * @}
 */
